char *take_delim(char **readed)
{
	while (**readed)
	{
		if (**readed == COMMENT_CHAR)
			return ("\0");
		else if (**readed == '.')
			return (" \t");
		else if (**readed == '\"')
		{
			(*readed)++;
			return ("\"");
		}
		else if (ft_isalpha(**readed))
			return (" ,:\t");
		else if (**readed == 'r')
			return (",\0");
		else if (**readed == DIRECT_CHAR)
			return (",\0");
		else if (ft_isdigit(**readed))
			return (",\0");
		(*readed)++;
	}
	return(NULL);
}

int	parse(char **readed)
{
	int i;
	char *line;
	char *pch;
	char *delim;
	char *reentry;

	i = 0;
	while ((line = ft_strdup(readed[i])))
	{
		reentry = NULL;
		delim = take_delim(&line);
		pch = ft_strtok_r(line, delim, &reentry);
		while (pch != NULL)
		{
			line += (ft_strlen(pch) + 1);
			delim = take_delim(&line);
			ft_printf("[%s]\n", ft_strtrim(pch));
			pch = ft_strtok_r(line, delim, &reentry);
			getchar();
		}
		ft_printf("__________________\n");
		i++;
	}
	return (1);
}

// ft_printf("Lexical error at [%d:%d]\n", i, 1);
// while (pch != NULL)
// {
// 	if (ft_strisalpha(pch))
// 	{
// 		ft_printf("INSTRUCTION: [%s, %d]\n", pch, i);
// 	}
// 	else if (ft_strisnum(pch))
// 	{
// 		ft_printf("INDIRECT: [%s, %d]\n", pch, i);
// 	}
// 	else if (pch[0] == '%')
// 	{
// 		if (ft_strisnum(pch + 1))
// 			ft_printf("DIRECT: [%s, %d]\n", pch, i);
// 		else if (pch[1] == ':' && ft_strisalnum(pch + 2))
// 			ft_printf("DIRECT_LABEL: [%s, %d]\n", pch, i);
// 	}
// 	else if (pch[0] == 'r')
// 	{
// 		ft_printf("REGISTER: [%s, %d]\n", pch, i);
// 	}
// 	else if (pch[ft_strlen(pch) - 1] == ':')
// 	{
// 		ft_printf("LABEL: [%s, %d]\n", pch, i);
// 	}
// 	else
// 		ft_printf("ERROR?: [%s, %d]\n", pch, i);
// 	pch = ft_strtok(NULL, "\n");
// 	i++;
// }


int	parse(char **readed)
{
	int i;
	char *line;
	char *pch;
	char *delim = "#:.";
	char *reentry;

	i = 0;
	while ((line = ft_strdup(readed[i])))
	{
		reentry = NULL;
		pch = lexer(line, delim, &reentry);
		while (pch != NULL)
		{
			line += (ft_strlen(pch) + 1);
			ft_printf("[%s]\n", pch);
			pch = lexer(0, delim, &reentry);
			getchar();
		}
		ft_printf("__________________\n");
		i++;
	}
	return (1);
}


// if (match("^\?*.name\?*\"\a*", rd[i]))
// {
// 	ft_printf("%s\n", rd[i]);
// 	while (!match("\"\?*$", rd[i]))
// 	{
// 		i++;
// 		ft_printf("%s\n", rd[i]);
// 	}
// }
// else if (match("^\?*.comment\?*\"\a*", rd[i]))
// {
// 	ft_printf("%s\n", rd[i]);
// 	while (!match("\"\?*$", rd[i]))
// 	{
// 		i++;
// 		ft_printf("%s\n", rd[i]);
// 	}
// }
// else if (ft_strchr(rd[i], '\"'))
// {
// 	ft_printf("Error at %d\n", (i + 1));
// 	return (0);
// }


// static char	**ft_readlines(int fd)
// {
// 	char *line;
// 	char **rd;
// 	size_t i;
//
// 	if (!(rd = (char **)malloc(sizeof(*rd))))
// 		exit(1);
// 	i = 0;
// 	while (get_next_line(fd, &line))
// 	{
// 		if (i > 0 && !(rd = (char **)realloc(rd, sizeof(*rd) * (i + 1))))
// 			exit(1);
// 		rd[i] = ft_strdup(line);
// 		ft_memdel((void **)&line);
// 		if (!(rd[i]))
// 		{
// 			ft_freemas(&rd, 0);
// 			exit(1);
// 		}
// 		i++;
// 	}
// 	if (!(rd = (char **)realloc(rd, sizeof(*rd) * i)))
// 	{
// 		ft_freemas(&rd, 0);
// 		exit(1);
// 	}
// 	rd[i] = NULL;
// 	return(rd);
// }
//
// int				read_s(char *fname)
// {
// 	char	**rd;
// 	int		fd;
//
// 	if (check_fname(fname))
// 	{
// 		if (((fd = open(fname, O_RDONLY)) != -1))
// 		{
// 			rd = ft_readlines(fd);
// 			parse(rd);
// 			ft_freemas(&rd, 0);
// 			close(fd);
// 			return (1);
// 		}
// 	}
// 	ft_printf("Can't read source file %s\n", fname);
// 	return (0);
// }
